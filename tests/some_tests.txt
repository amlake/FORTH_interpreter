: double dup + ; 5 double .s 

1 2 3 4 5 6 * * * * * .s 4 2 - .s * .

1 2 100000 3 10000 drop nip over 10 * tuck 2 * swap dup + + + + + 27 - .

: abs dup 0 < if -1 * endif ; -5 abs .s 	
					
: abs dup 0 < if -1 * else dup drop endif ; 5 abs .s

: power dup 1 = if drop else over swap 1 - power * endif ;
(example of recursive function definition)

: foo												
  dup 10 < if
    100 +
  else
    10 +
  endif
;

5 foo 15 foo 10 * + 313 -